======================================================================
AUTOMATED FEEDBACK LOG
======================================================================

HOW TO READ THIS FEEDBACK:
--------------------------
1. This log contains detailed feedback on your code execution
2. Each script is tested and results are shown with output and errors
3. IMPORTANT: Read all the way to the END for a summary and debugging guidance
4. The summary at the end will help you understand and fix any issues
5. Scripts are run in a headless environment (no GUI applications)

======================================================================

Starting testing for An Dao

Processing week 2

Your current Git repo size is about 1.62 MiB on disk

Found directories: .git, week1, week2, Feedback, week3
Found files: .gitignore, README.md

Processing week 2: week2

Found 20 code files to test.

Note: Expected file checking not performed (no FileList provided).
Expected file checking will only be performed during final assessment.

======================================================================
Script: MyExampleScript.py

Contents:

**********
def foo(x):
    x *=x
    print(x)

foo(2)
**********

Output (first 500 chars):

**********
4

**********
No errors.
======================================================================
Script: lc2.py

Contents:

**********
# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )

# (1) Use a list comprehension to create a list of month,rainfall tuples where
# the amount of rain was greater than 100 mm.
 
# (2) Use a list comprehension to create a list of just month names where the
# amount of rain was less than 50 mm. 

# (3) Now do (1) and (2) using conventional loops (you can choose to do 
# this before 1 and 2 !).

# A good example output is:
#
# Step #1:
# Months and rainfall values when the amount of rain was greater than 100mm:
# [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
# ... etc.

###STEP 1###
rainfall_months_over_100 = [(i[0], i[1]) for i in rainfall if i[1] > 100]
print("Months and rainfall values when the amount of rain was greater than 100mm:",rainfall_months_over_100)

###STEP 2###
rainfall_months_under_50 = [(i[0], i[1]) for i in rainfall if i[1] < 50]
print("Months and rainfall values when the amount of rain was less than 50mm:", rainfall_months_under_50)

###STEP 3###
rainfall_months_over_100 = []
for i in rainfall:
     if i[1] > 100:
        rainfall_months_over_100.append((i[0], i[1]))
print("Months and rainfall values when the amount of rain was greater than 100mm:",rainfall_months_over_100)

rainfall_months_under_50 = []
for i in rainfall:
     if i[1] < 50:
        rainfall_months_under_50.append((i[0], i[1]))
print("Months and rainfall values when the amount of rain was less than 50mm:", rainfall_months_under_50)


**********

Output (first 500 chars):

**********
Months and rainfall values when the amount of rain was greater than 100mm: [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
Months and rainfall values when the amount of rain was less than 50mm: [('MAR', 49.9), ('SEP', 27.0)]
Months and rainfall values when the amount of rain was greater than 100mm: [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
Months and rainfall values when the amount of rain was less than 50mm: [('MAR', 49.9),
**********
No errors.
======================================================================
Script: oaks.py

Contents:

**********
taxa = [ 'Quercus robur',
        'Fraxinus excelsior',
        'Pinus sylvestris',
        'Quercus cerris',
        'Quercus petraea',
        ]

def is_an_oak(name):
    return name.lower().startswith('quercus ')

oaks_loops = set()
for species in taxa:
        if is_an_oak(species):
                oaks_loops.add(species)
print (oaks_loops)

oaks_lc = ([species for species in taxa if is_an_oak(species)])
print (oaks_lc)

oaks_loops = set()
for species in taxa:
        if is_an_oak(species):
                oaks_loops.add(species.upper())
print(oaks_loops)

oaks_lc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)
**********

Output (first 500 chars):

**********
{'Quercus cerris', 'Quercus petraea', 'Quercus robur'}
['Quercus robur', 'Quercus cerris', 'Quercus petraea']
{'QUERCUS PETRAEA', 'QUERCUS CERRIS', 'QUERCUS ROBUR'}
{'QUERCUS PETRAEA', 'QUERCUS CERRIS', 'QUERCUS ROBUR'}

**********
No errors.
======================================================================
Script: dictionary.py

Contents:

**********
taxa = [ ('Myotis lucifugus','Chiroptera'),
         ('Gerbillus henleyi','Rodentia',),
         ('Peromyscus crinitus', 'Rodentia'),
         ('Mus domesticus', 'Rodentia'),
         ('Cleithrionomys rutilus', 'Rodentia'),
         ('Microgale dobsoni', 'Afrosoricida'),
         ('Microgale talazaci', 'Afrosoricida'),
         ('Lyacon pictus', 'Carnivora'),
         ('Arctocephalus gazella', 'Carnivora'),
         ('Canis lupus', 'Carnivora'),
        ]

# Write a python script to populate a dictionary called taxa_dic derived from
# taxa so that it maps order names to sets of taxa and prints it to screen.
# 
# An example output is:
#  
# 'Chiroptera' : set(['Myotis lucifugus']) ... etc. 
# OR, 
# 'Chiroptera': {'Myotis  lucifugus'} ... etc

#### Your solution here ####

taxa_dic = {}

for species, order in taxa:
        if order not in taxa_dic:
                taxa_dic[order] = set()
        taxa_dic[order].add(species)
for order, species in taxa_dic.items():
    print(f"{order}: {species}")

# Now write a list comprehension that does the same (including the printing after the dictionary has been created)  

#### Your solution here ####
taxa_dic = {order: {species for species, o in taxa if o == order} for order in set(o for _, o in taxa)}

for order, species in taxa_dic.items():
    print(f"{order}: {species}")

**********

Output (first 500 chars):

**********
Chiroptera: {'Myotis lucifugus'}
Rodentia: {'Cleithrionomys rutilus', 'Mus domesticus', 'Gerbillus henleyi', 'Peromyscus crinitus'}
Afrosoricida: {'Microgale talazaci', 'Microgale dobsoni'}
Carnivora: {'Arctocephalus gazella', 'Lyacon pictus', 'Canis lupus'}
Rodentia: {'Cleithrionomys rutilus', 'Mus domesticus', 'Gerbillus henleyi', 'Peromyscus crinitus'}
Carnivora: {'Arctocephalus gazella', 'Lyacon pictus', 'Canis lupus'}
Chiroptera: {'Myotis lucifugus'}
Afrosoricida: {'Microgale talazaci', 'Mi
**********
No errors.
======================================================================
Script: cfexercises2.py

Contents:

**********


def hello_1(x):
    for j in range(x):
        if j % 3 == 0:
            print('hello')
    print(' ')

hello_1(12)


def hello_2(x):
    for j in range(x):
        if j % 5 == 3:
            print('hello')
        elif j % 4 == 3:
            print('hello')
    print(' ')

hello_2(12)


def hello_3(x, y):
    for i in range(x, y):
        print('hello')
    print(' ')

hello_3(3, 17)


def hello_4(x):
    while x != 15:
        print('hello')
        x = x + 3
    print(' ')

hello_4(0)


def hello_5(x):
    while x < 100:
        if x == 31:
            for k in range(7):
                print('hello')
        elif x == 18:
            print('hello')
        x = x + 1
    print(' ')

hello_5(12)


def hello_6(x, y):
    while x: 
        print("hello! " + str(y))
        y += 1
        if y == 6:
            break
    print(' ')

hello_6 (True, 0)
**********

Output (first 500 chars):

**********
hello
hello
hello
hello
 
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
hello
hello
hello
 
hello! 0
hello! 1
hello! 2
hello! 3
hello! 4
hello! 5
 

**********
No errors.
======================================================================
Script: using_name.py

Contents:

**********
#!/usr/bin/env python3
# Filename: using_name.py

if __name__ == '__main__':
    print('This program is being run by itself!')
else:
    print('I am being imported from another script/program/module!')

print("This module's name is: " + __name__)
**********

Output (first 500 chars):

**********
This program is being run by itself!
This module's name is: __main__

**********
No errors.
======================================================================
Script: basic_io3.py

Contents:

**********
#############################
# STORING OBJECTS
#############################
# To save an object (even complex) for later use
my_dictionary = {"a key": 10, "another key": 11}

import pickle

f = open('../sandbox/testp.p','wb') ## note the b: accept binary files
pickle.dump(my_dictionary, f)
f.close()

## Load the data again
f = open('../sandbox/testp.p','rb')
another_dictionary = pickle.load(f)
f.close()

print(another_dictionary)

**********

Output (first 500 chars):

**********

**********
Errors:
**********
Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2025-26/Coursework/StudentRepos/AnDao_abd21/week2/code/basic_io3.py", line 9, in <module>
    f = open('../sandbox/testp.p','wb') ## note the b: accept binary files
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '../sandbox/testp.p'

**********
======================================================================
Script: scope.py

Contents:

**********
###FIRST NESTED###

i = 1
x = 0
def a_function(y):
    x = 0
    for i in range(y):
        x += 1
    return x
a_function(10)
print(i)
print(x)

###SECOND NESTED###

i = 1
x = 0
def a_function(y):
    x = 0
    for i in range(y):
        x += 1
    return x
a_function(10)

###FIRST GLOBAL###

_a_global = 10

if _a_global >= 5:
    _b_global = _a_global + 5
    
print("Before calling a_function, outside the function, the value of _a_global is", _a_global)
print("Before calling a_function, outside the function, the value of _b_global is", _b_global)

def a_function():
    _a_global = 4
    
    if _a_global >= 4:
        _b_global = _a_global + 5
    
    _a_local = 3
    
    print("Inside the function, the value of _a_global is", _a_global)
    print("Inside the function, the value of _b_global is", _b_global)
    print("Inside the function, the value of _a_local is", _a_local)
    
a_function()

print("After calling a_function, outside the function, the value of _a_global is (still)", _a_global)
print("After calling a_function, outside the function, the value of _b_global is (still)", _b_global)
#print("After calling a_function, outside the function, the value of _a_local is ", _a_local) #This line will cause an error

###SECOND GLOBAL###

_a_global = 10

def a_function():
    _a_local = 4
    
    print("Inside the function, the value _a_local is", _a_local)
    print("Inside the function, the value of _a_global is", _a_global)
    
a_function()

print("Outside the function, the value of _a_global is", _a_global)

###THIRD GLOBAL###

def a_function():
    _a_global = 10

    def _a_function2():
        global _a_global
        _a_global = 20
    
    print("Before calling a_function2, value of _a_global is", _a_global)

    _a_function2()
    
    print("After calling a_function2, value of _a_global is", _a_global)
    
a_function()

print("The value of a_global in main workspace / namespace now is", _a_global)

###FOURTH GLOBAL###

_a_global = 10

def a_function():

    def _a_function2():
        global _a_global
        _a_global = 20
    
    print("Before calling a_function2, value of _a_global is", _a_global)

    _a_function2()
    
    print("After calling a_function2, value of _a_global is", _a_global)

a_function()

print("The value of a_global in main workspace / namespace is", _a_global)
**********

Output (first 500 chars):

**********
1
0
Before calling a_function, outside the function, the value of _a_global is 10
Before calling a_function, outside the function, the value of _b_global is 15
Inside the function, the value of _a_global is 4
Inside the function, the value of _b_global is 9
Inside the function, the value of _a_local is 3
After calling a_function, outside the function, the value of _a_global is (still) 10
After calling a_function, outside the function, the value of _b_global is (still) 15
Inside the function, the
**********
No errors.
======================================================================
Script: basic_io1.py

Contents:

**********
#############################
# FILE INPUT
#############################
# Open a file for reading
f = open('../sandbox/test.txt', 'r')
# use "implicit" for loop:
# if the object is a file, python will cycle over lines
for line in f:
    print(line)

# close the file
f.close()

# Same example, skip blank lines
f = open('../sandbox/test.txt', 'r')
for line in f:
    if len(line.strip()) > 0:
        print(line)

f.close()

**********

Output (first 500 chars):

**********

**********
Errors:
**********
Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2025-26/Coursework/StudentRepos/AnDao_abd21/week2/code/basic_io1.py", line 5, in <module>
    f = open('../sandbox/test.txt', 'r')
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '../sandbox/test.txt'

**********
======================================================================
Script: cfexercises1.py

Contents:

**********
#def foo_1(x):
#   return x ** 0.5
#
#def foo_2(x ,y):
#    if x > y:
#        return x
#    return y
#
#def foo_3(x,y,z):
#    if x > y:
#        x, y = y, z
#        x, z = z, x
#    if x > z:
#    if y > z:
#        y, z = z, y
#    return [x, y, z]
#
#def foo_4(x):
#    result = 1
#    for i in range (1, x + 1):
#        result = result * i
#    return result
#
#def foo_5(x):
#    if x ==1:
#        return 1
#    return x * foo_5(x-1)
#
#def foo_6(x):
#    facto = 1
#    while x >= 1:
#        facto = facto * x
#        x = x - 1
#    return facto

###MODIFIED CODE###

#1 - Square Root
def foo_1(x):
    x = x ** 0.5
    print("The square root of this number is:", x)
    return x

#2 - Two number Cmparison
def foo_2(x, y):
    if x > y:
        print ("Your first number (",x,") is greater than your second number (",y,")")
        return x
    elif y > x:
        print ("Your second number (",y,") is greater than your first number (",x,")")
        return y
    else:
        print("Your numbers are equal!")
        return y

#3 - Three number compare

def foo_3(x, y, z):
    if x > y:
        x, y = y, z
        print("Your first number is bigger than your second number! Your first number is now your second number and your second number is now the third number.")
    if x > z:
        x, z = z, x
        print("Your first number is bigger than your third number! They have been swapped around.")
    if y > z:
        y, z = z, y
        print("Your second number is bigger than your third number! They have been swapped around.")
    return [x, y, z]

#4 - Factoral

def foo_4(x):
    result = 1
    for i in range (1, x + 1):
        result = result * i
    print("The factoral for", x, "is", result)
    return result

#5 - Factoral 2

def foo_5(x):
    if x == 1:
        y = 1
    else:
        y = x * foo_5(x - 1)
    print("The factorial of", x, "is", y)
    return y

#6 - Factoral 3
def foo_6(x):
    y = x
    facto = 1
    while x >= 1:
        facto = facto * x
        x = x - 1
    print("The factorial of", y, "is", facto)
    return facto

# Test Arguments

foo_1(10)
foo_2(10,11)
foo_3(12,11,10)
foo_4(4)
foo_5(4)
foo_6(4)
**********

Output (first 500 chars):

**********
The square root of this number is: 3.1622776601683795
Your second number ( 11 ) is greater than your first number ( 10 )
Your first number is bigger than your second number! Your first number is now your second number and your second number is now the third number.
Your first number is bigger than your third number! They have been swapped around.
The factoral for 4 is 24
The factorial of 1 is 1
The factorial of 2 is 2
The factorial of 3 is 6
The factorial of 4 is 24
The factorial of 4 is 24

**********
No errors.
======================================================================
Script: boilerplate.py

Contents:

**********
#!/usr/bin/env python3

"""Description of this program or application.
You can use several lines"""

__appname__ = '[application name here]'
__author__ = 'Your Name (your@email.address)'
__version__ = '0.0.1'
__license__ = "License for this code/program"

## imports ##
import sys # module to interface our program with the operating system

## constants ##


## functions ##
def main(argv):
    """ Main entry point of the program """
    print('This is a boilerplate') # NOTE: indented using two tabs or 4 spaces
    return 0

if __name__ == "__main__": 
    """Makes sure the "main" function is called from command line"""  
    status = main(sys.argv)
    sys.exit(status)
**********

Output (first 500 chars):

**********
This is a boilerplate

**********
No errors.
======================================================================
Script: basic_io2.py

Contents:

**********
#############################
# FILE OUTPUT
#############################
# Save the elements of a list to a file
list_to_save = range(100)

f = open('../sandbox/testout.txt','w')
for i in list_to_save:
    f.write(str(i) + '\n') ## Add a new line at the end

f.close()
**********

Output (first 500 chars):

**********

**********
Errors:
**********
Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2025-26/Coursework/StudentRepos/AnDao_abd21/week2/code/basic_io2.py", line 7, in <module>
    f = open('../sandbox/testout.txt','w')
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '../sandbox/testout.txt'

**********
======================================================================
Script: control_flow.py

Contents:

**********
#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""
#docstrings are considered part of the running code (normal comments are
#stripped). Hence, you can access your docstrings at run time.
__author__ = 'Samraat Pawar (s.pawar@imperial.ac.uk)'
__version__ = '0.0.1'

import sys

def even_or_odd(x=0): # if not specified, x should take value 0.

    """Find whether a number x is even or odd."""
    if x % 2 == 0: #The conditional if
        return f"{x} is Even!"
    return f"{x} is Odd!"

def largest_divisor_five(x=120):
    """Find which is the largest divisor of x among 2,3,4,5."""
    largest = 0
    if x % 5 == 0:
        largest = 5
    elif x % 4 == 0: #means "else, if"
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 == 0:
        largest = 2
    else: # When all other (if, elif) conditions are not met
        return f"No divisor found for {x}!" # Each function can return a value or a variable.
    return f"The largest divisor of {x} is {largest}"

def is_prime(x=70):
    """Find whether an integer is prime."""
    for i in range(2, x): #  "range" returns a sequence of integers
        if x % i == 0:
            print(f"{x} is not a prime: {i} is a divisor") 
            return False
    print(f"{x} is a prime!")
    return True 

def find_all_primes(x=22):
    """Find all the primes up to x"""
    allprimes = []
    for i in range(2, x + 1):
        if is_prime(i):
            allprimes.append(i)
    print(f"There are {len(allprimes)} primes between 2 and {x}")
    return allprimes
      
def main(argv):
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)
**********

Output (first 500 chars):

**********
22 is Even!
33 is Odd!
The largest divisor of 120 is 5
No divisor found for 121!
60 is not a prime: 2 is a divisor
False
59 is a prime!
True
2 is a prime!
3 is a prime!
4 is not a prime: 2 is a divisor
5 is a prime!
6 is not a prime: 2 is a divisor
7 is a prime!
8 is not a prime: 2 is a divisor
9 is not a prime: 3 is a divisor
10 is not a prime: 2 is a divisor
11 is a prime!
12 is not a prime: 2 is a divisor
13 is a prime!
14 is not a prime: 2 is a divisor
15 is not a prime: 3 is a divisor
16 is
**********
No errors.
======================================================================
Script: lc1.py

Contents:

**********
birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )

#(1) Write three separate list comprehensions that create three different
# lists containing the latin names, common names and mean body masses for
# each species in birds, respectively. 

# (2) Now do the same using conventional loops (you can choose to do this 
# before 1 !). 

# A nice example out out is:
# Step #1:
# Latin names:
# ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
# ... etc.

###STEP 1###

latin_names = [i[0] for i in birds]
print("Latin names:",latin_names)

common_names = [i[1] for i in birds]
print("Common names:",common_names)

mean_body_masses = [i[2] for i in birds]
print("Mean body masses:",mean_body_masses)


 ###STEP 2###

latin_names = []
for i in birds:
    latin_names.append(i[0])
print("Latin names:",latin_names)

common_names = []
for i in birds:
    common_names.append(i[1])
print("Common names:",common_names)

mean_body_masses = []
for i in birds:
    mean_body_masses.append(i[2])
print("Mean body masses:",mean_body_masses)
**********

Output (first 500 chars):

**********
Latin names: ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
Common names: ['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
Mean body masses: [18.7, 19, 19.5, 19.6, 20.2]
Latin names: ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
Common names: ['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree s
**********
No errors.
======================================================================
Script: sysargv.py

Contents:

**********
#!/usr/bin/env python3

import sys
print("This is the name of the script: ", sys.argv[0])
print("Number of arguments: ", len(sys.argv))
print("The arguments are: " , str(sys.argv))
**********

Output (first 500 chars):

**********
This is the name of the script:  sysargv.py
Number of arguments:  1
The arguments are:  ['sysargv.py']

**********
No errors.
======================================================================
Script: oaks_debugme.py

Contents:

**********
import csv
import sys
import doctest

#Define function
def is_an_oak(name):
    return name.lower().startswith('quercus') # typo here with "quercus"

import ipdb; ipdb.set_trace()

def main(argv): 
    f = open('../data/TestOaksData.csv','r')
    g = open('../data/JustOaksData.csv','w')
    taxa = csv.reader(f)
    csvwrite = csv.writer(g)
    oaks = set()
    for row in taxa:
        print(row)
        print ("The genus is: ") 
        print(row[0] + '\n')
        if is_an_oak(row[0]):
            print('FOUND AN OAK!\n')
            csvwrite.writerow([row[0], row[1]])  
    f.close() # closing files
    g.close() #
    return 0


if (__name__ == "__main__"):
    status = main(sys.argv)

doctest.testmod()
**********

Output (first 500 chars):

**********
Ctrl click to launch VS Code Native REPL
> [0;32m/home/mhasoba/Documents/Teaching/IC_CMEE/2025-26/Coursework/StudentRepos/AnDao_abd21/week2/code/oaks_debugme.py[0m(11)[0;36m<module>[0;34m()[0m
[0;32m     10 [0;31m[0;34m[0m[0m
[0m[0;32m---> 11 [0;31m[0;32mdef[0m [0mmain[0m[0;34m([0m[0margv[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0m[0;32m     12 [0;31m    [0mf[0m [0;34m=[0m [0mopen[0m[0;34m([0m[0;34m'../data/TestOaksData.csv'[0m[0;34m,[0m[0;34m'r'
**********
Errors:
**********
Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2025-26/Coursework/StudentRepos/AnDao_abd21/week2/code/oaks_debugme.py", line 11, in <module>
    def main(argv):
  File "/usr/lib/python3.12/bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/bdb.py", line 115, in dispatch_line
    if self.quitting: raise BdbQuit
                      ^^^^^^^^^^^^^
bdb.BdbQuit

If you suspect this is an IPython 8.20.0 bug, please report it at:
    https://github.com/ipython/ipython/issues
or send an email to the mailing list at ipython-dev@python.org

You can print a more detailed traceback right now with "%tb", or use "%debug"
to interactively debug it.

Extra-detailed tracebacks for bug-reporting purposes can be enabled via:
    %config Application.verbose_crash=True


**********
======================================================================
Script: tuple.py

Contents:

**********
birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

# Birds is a tuple of tuples of length three: latin name, common name, mass.
# write a (short) script to print these on a separate line or output block by
# species 
# 
# A nice example output is:
# 
# Latin name: Passerculus sandwichensis Common name: Savannah sparrow Mass: 18.7
# ... etc.

for latin_name, common_name, mass in birds:
    print(f"Latin name: {latin_name}, Common name: {common_name}, Mass: {mass};")
**********

Output (first 500 chars):

**********
Latin name: Passerculus sandwichensis, Common name: Savannah sparrow, Mass: 18.7;
Latin name: Delichon urbica, Common name: House martin, Mass: 19;
Latin name: Junco phaeonotus, Common name: Yellow-eyed junco, Mass: 19.5;
Latin name: Junco hyemalis, Common name: Dark-eyed junco, Mass: 19.6;
Latin name: Tachycineata bicolor, Common name: Tree swallow, Mass: 20.2;

**********
No errors.
======================================================================
Script: loops.py

Contents:

**********
# FOR loops
for i in range(5):
    print(i)

my_list = [0, 2, "geronimo!", 3.0, True, False]
for k in my_list:
    print(k)

total = 0
summands = [0, 1, 11, 111, 1111]
for s in summands:
    total = total + s
    print(total)

# WHILE loop
z = 0
while z < 100:
    z = z + 1
    print(z)
**********

Output (first 500 chars):

**********
0
1
2
3
4
0
2
geronimo!
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100

**********
No errors.
======================================================================
Script: basic_csv.py

Contents:

**********
import csv

# Read a file containing:
# 'Species','Infraorder','Family','Distribution','Body mass male (Kg)'
with open('../data/python/testcsv.csv','r') as f:

    csvread = csv.reader(f)
    temp = []
    for row in csvread:
        temp.append(tuple(row))
        print(row)
        print("The species is", row[0])

# write a file containing only species name and Body mass
with open('../data/python/testcsv.csv','r') as f:
    with open('../data/python/bodymass.csv','w') as g:

        csvread = csv.reader(f)
        csvwrite = csv.writer(g)
        for row in csvread:
            print(row)
            csvwrite.writerow([row[0], row[4]])

**********

Output (first 500 chars):

**********
['Species', 'Infraorder', 'Family', 'Distribution', 'Body mass male (Kg)']
The species is Species
['Daubentonia_madagascariensis', 'Chiromyiformes ', 'Daubentoniidae', 'Madagascar', '2.7']
The species is Daubentonia_madagascariensis
['Allocebus_trichotis', 'Lemuriformes', 'Cheirogaleidae', 'Madagascar', '0.1']
The species is Allocebus_trichotis
['Avahi_laniger', 'Lemuriformes', 'Indridae', 'America', '1.03']
The species is Avahi_laniger
['Avahi_occidentalis', 'Lemuriformes', 'Indridae', 'Madagas
**********
No errors.
======================================================================
Script: align_seqs.py

Contents:

**********
# Two example sequences to match

#seq2 = "ATCGCCGGATTACGGG"
#seq1 = "CAATTCGGAT"

#Single external file input (.csv)
def file_sequence(x):
    with open(x, 'r') as file:
        lines = file.readlines()  # Remove whitespace and spaces
        seq1 = lines[1].split(",")[1].strip()
        seq2 = lines[2].split(",")[1].strip()
    return seq1, seq2

seq1, seq2 = file_sequence("../data/combined_file.csv") #Combined csv file with two fasta sequences

# Assign the longer sequence s1, and the shorter to s2
# l1 is length of the longest, l2 that of the shortest

l1 = len(seq1)
l2 = len(seq2)
if l1 >= l2:
    s1 = seq1
    s2 = seq2
else:
    s1 = seq2
    s2 = seq1
    l1, l2 = l2, l1 # swap the two lengths

# A function that computes a score by returning the number of matches starting
# from arbitrary startpoint (chosen by user)
def calculate_score(s1, s2, l1, l2, startpoint):
    matched = "" # to hold string displaying alignements
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"

    # some formatted output
    #print("." * startpoint + matched)           
    #print("." * startpoint + s2)
    #print(s1)
    #print(score) 
    #print(" ")

    return score

# Test the function with some example starting points:
# calculate_score(s1, s2, l1, l2, 0)
# calculate_score(s1, s2, l1, l2, 1)
# calculate_score(s1, s2, l1, l2, 5)

# now try to find the best match (highest score) for the two sequences
my_best_align = None
my_best_score = -1

for i in range(l1):
    z = calculate_score(s1, s2, l1, l2, i)
    if z > my_best_score:
        my_best_align = "." * i + s2
        my_best_score = z 
print(my_best_align)
print("Best score:", my_best_score)

#Write to external text file
with open("../results/score.txt", "w") as file:
    file.write("Best alignment: " + my_best_align + "\n")
    file.write("Best score: " + str(my_best_score))

**********

Output (first 500 chars):

**********
............................................................................AAAAAAACAAAAAGATACATATATATGATATATCTGATATATGATATATATATGATATATCTGATATATGATATATATATGATATATCTGATATATGATATATATATGATATATCTGATATATGATATATATATGATATATCTGATATATATACATATGGTATACATGAGATACATCATATGTATATATGGTATACATGAGATACATCATATGTATATATGGTATACATGAGATACATCATATGTATATATGGTATACATGAGATACATCATATGTATACATGAGATACATCATATGTATACATGAGATACATCATATGTATACATGAGATACATCATATGTATACATGAGATACATCATATGTATACATGAGATACATCATATGTATACATGAGATACATCATATGTATACATGAGATACATC
**********
No errors.

======================================================================
FEEDBACK SUMMARY
======================================================================

Scripts tested: 20
Scripts successful: 16
Scripts with errors: 4
Warnings/Notes: 1

IMPORTANT DEBUGGING GUIDANCE:
------------------------------

Please review all warnings and errors, and your directory structure based on the above log.

Ask yourself: Why did I not get these warnings or errors on my machine when I tested my code?
Common reasons for environment differences:

• File paths: Your local machine may have different directory structures
• Dependencies: Missing packages or different versions
• File permissions: Scripts may not be executable on the testing server
• Case sensitivity: Linux systems are case-sensitive (your laptop may not be)
• Working directory: Scripts may assume they run from a specific location
• Input files: Required data files may be missing or in wrong locations

Debugging steps:
1. Test your code in a clean environment (fresh directory)
2. Check all file paths are relative and correct
3. Verify all required files are present and properly named
4. Test on a case-sensitive system if possible
5. Run your scripts from different directories to check robustness

Fix these issues and test again. Good debugging skills are essential for scientific computing!

