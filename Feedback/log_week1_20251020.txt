======================================================================
AUTOMATED FEEDBACK LOG
======================================================================

HOW TO READ THIS FEEDBACK:
--------------------------
1. This log contains detailed feedback on your code execution
2. Each script is tested and results are shown with output and errors
3. IMPORTANT: Read all the way to the END for a summary and debugging guidance
4. The summary at the end will help you understand and fix any issues
5. Scripts are run in a headless environment (no GUI applications)

======================================================================

Starting testing for An Dao

Processing week 1

Your current Git repo size is about 1.62 MiB on disk

Found directories: .git, week1, week2, Feedback, week3
Found files: .gitignore, README.md

Processing week 1: week1

Found 8 code files to test.

Note: Expected file checking not performed (no FileList provided).
Expected file checking will only be performed during final assessment.

======================================================================
Script: csvtospace.sh

Contents:

**********
#!/bin/sh
# Author: abd21@ic.ac.uk
# Script: csvtospace.sh
# Descripton: change .csv to space separated file
#
#
# Date: October 2025

echo "Please enter a csv file name:"   
read csv_file
echo "You have input:" $csv_file
        
if [[ "$csv_file" != *.csv ]]; then
    echo "Input file must have a .csv extension."
    exit 1
fi

if [[ "$csv_file" = *.csv ]]; then
    echo "Processing..."
fi

file_path="week1/data/temperature/$csv_file"

if [[ ! -f "$file_path" ]]; then
    echo "No .csv file found under that input."
    exit 1
fi

echo "File found!"
echo "Converting to space separated file."

output_file="week1/data/temperature/${csv_file%.csv}.txt"

tr ',' ' ' < "$file_path" > "$output_file"

echo "Converted file saved in: $output_file"
**********

Output (first 500 chars):

**********
Please enter a csv file name:
You have input:
Input file must have a .csv extension.

**********
No errors.
======================================================================
Script: tiff2png.sh

Contents:

**********
#!/bin/sh
# Author: abd21@ic.ac.uk
# Script: tiff2png.sh
# Descripton: Convert tiff file to png file
#
# Date: October 2025

# ORIGINAL CODE
#for f in *.tif;
#    do
#        echo "Converting $f";
#        convert "$f" "$(basename "f" .tif).png";
#    done

echo "Please enter the .tif file to convert to .png:"  
read f

if [[ "$f" != *.tif ]]; then
    echo "Input file must have a .tif extension."
    exit 1
fi

file_path="week1/data/$f"

if [[ ! -f "$file_path" ]]; then
    echo "No file can be found under that input."
    exit 1
fi

echo "Converting $f"; 
convert "$file_path" "week1/data/$(basename "$f" .tif).png"
**********

Output (first 500 chars):

**********
Please enter the .tif file to convert to .png:
Input file must have a .tif extension.

**********
No errors.
======================================================================
Script: boilerplate.sh

Contents:

**********
#!/bin/zsh
# Author: abd21@ic.ac.uk
# Script: biolerplate.sh
# Desc: simple boilerplate for shell scripts
# Arguments: none
# Date: Oct 20192025

echo -e "\nThis is a shell script! \n"

#exit
**********

Output (first 500 chars):

**********

This is a shell script! 


**********
No errors.
======================================================================
Script: ConcatenateTwoFiles.sh

Contents:

**********
#!/bin/sh
# Author: abd21@ic.ac.uk
# Script: ConcatenateTwoFiles.sh
# Descripton: Concatenate contents of two files
#
# Date: October 2025

# ORIGINAL CODE
#
#cat $1 > $3
#cat $2 >> $3
#echo "Merged File is"
#cat $3

echo "Please enter the first file to concatenate:"  
read file_1

file_path_1="week1/data/$file_1"

if [[ ! -f "$file_path_1" ]]; then
    echo "No file can be found under that input."
    exit 1
fi

echo "Please enter the second file to concatenate:"  
read file_2

file_path_2="week1/data/$file_2"

if [[ ! -f "$file_path_2" ]]; then
    echo "No file can be found under that input."
    exit 1
fi

echo "Please name your combined file..."
read concatenate_file

echo "Combining files..." 
cat $file_path_1 > "week1/data/$concatenate_file"
cat $file_path_2 >> "week1/data/$concatenate_file"
**********

Output (first 500 chars):

**********
Please enter the first file to concatenate:
No file can be found under that input.

**********
No errors.
======================================================================
Script: tabtocsv.sh

Contents:

**********
#!/bin/sh
# Author: abd21@ic.ac.uk
# Script: tabtocsv.sh
# Descripton: substitute the tabs in files with commas
#
# Saves the output into a .csv file
# Arguments: 1 -> tab delimited file
#
# Date: October 2025

# ORIGINAL CODE
# 
# echo "Creating a comma delimited version of $1 ..."
#
# cat $1 | tr -s "\t" "," >> $1.csv
# 
# echo "Done!"
# 
# exit

echo "Please enter a file to convert to csv:"  
read file

file_path="week1/data/$file"

if [[ ! -f "$file_path" ]]; then
    echo "No file can be found under that input."
    exit 1
fi

echo "File found!"
echo "Creating a comma delimited version of $file ..."

cat "$file_path" | tr -s "\t" "," >> "week1/data/${file}.csv"

echo "File has been converted."
**********

Output (first 500 chars):

**********
Please enter a file to convert to csv:
No file can be found under that input.

**********
No errors.
======================================================================
Script: MyExampleScript.sh

Contents:

**********
#!/bin/sh

MSG1="Hello"
MSG2=$USER
echo "$MSG1 $MSG2"
echo "Hello $USER"
echo

**********

Output (first 500 chars):

**********
Hello mhasoba
Hello mhasoba


**********
No errors.
======================================================================
Script: variables.sh

Contents:

**********
#!/bin/sh

##Illustrates the use of variables

# Special variables

echo "This script was called with $# paramters"
echo "The script's name is $0"
echo "The arguments are $@"
echo "The first arguement is $1"
echo "The second argument is $2"

# Assinged Variables; Explicit declaration:
MY_VAR='some string'
echo 'the current value of the variables is:' $MY_VAR
echo
echo 'Please enter a new string'
read MY_VAR
echo
echo 'the current value of the variable is:' $MY_VAR
echo

## Assinged Variables; Reading (multiple values) from user inputs:
echo 'Enter two numbers separates by space(s)'
read a b
echo 'you entered' $a 'and' $b '; Their sum is:'

## Assinged Variables: Command substitution
MY_SUM=$(expr $a + $b)
echo $MY_SUM
**********

Output (first 500 chars):

**********
This script was called with 0 paramters
The script's name is variables.sh
The arguments are 
The first arguement is 
The second argument is 
the current value of the variables is: some string

Please enter a new string

the current value of the variable is:

Enter two numbers separates by space(s)
you entered and ; Their sum is:


**********
Errors:
**********
expr: syntax error: missing argument after ‘+’

**********
======================================================================
Script: CountLines.sh

Contents:

**********
#!/bin/sh
# Author: abd21@ic.ac.uk
# Script: CountLines.sh
# Descripton: count the number of lines in a file
#
# Date: October 2025

NumLines=`wc -l < $1`
echo "The file $1 has $NumLines lines"
echo
**********

Output (first 500 chars):

**********
The file  has  lines


**********
Errors:
**********
CountLines.sh: line 8: $1: ambiguous redirect

**********

======================================================================
FEEDBACK SUMMARY
======================================================================

Scripts tested: 14
Scripts successful: 12
Scripts with errors: 2
Warnings/Notes: 1

IMPORTANT DEBUGGING GUIDANCE:
------------------------------

Please review all warnings and errors, and your directory structure based on the above log.

Ask yourself: Why did I not get these warnings or errors on my machine when I tested my code?
Common reasons for environment differences:

• File paths: Your local machine may have different directory structures
• Dependencies: Missing packages or different versions
• File permissions: Scripts may not be executable on the testing server
• Case sensitivity: Linux systems are case-sensitive (your laptop may not be)
• Working directory: Scripts may assume they run from a specific location
• Input files: Required data files may be missing or in wrong locations

Debugging steps:
1. Test your code in a clean environment (fresh directory)
2. Check all file paths are relative and correct
3. Verify all required files are present and properly named
4. Test on a case-sensitive system if possible
5. Run your scripts from different directories to check robustness

Fix these issues and test again. Good debugging skills are essential for scientific computing!

