MyData <- read.csv("../data/trees.csv")
ls(pattern = "My*")
class(MyData)
head(MyData) # Have a quick look at the data frame
str(MyData)
MyData <- read.csv("../data/trees.csv", header = F) # Import ignoring headers
head(MyData)
MyData <- read.table("../data/trees.csv", sep = ',', header = TRUE) #another way
head(MyData)
MyData <- read.csv("../data/trees.csv", skip = 5) # skip first 5 lines
MyData
write.csv(MyData, "../results/MyData.csv")
dir("../results/") # Check if it worked
write.table(MyData[1,], file = "../results/MyData.csv",append=TRUE) # append
write.csv(MyData, "../results/MyData.csv", row.names=TRUE) # write row names
write.table(MyData, "../results/MyData.csv", col.names=FALSE) # ignore col names
q()
q()
#A simple script to illustrate R input-output.
#Run line by line and check inputs outputs to understand what is happening
MyData <- read.csv("../data/trees.csv", header = TRUE) #import with headers
#A simple script to illustrate R input-output.
#Run line by line and check inputs outputs to understand what is happening
MyData <- read.csv("../data/trees.csv", header = TRUE) #import with headers
write.csv(MyData, "../results/MyData.csv") #write it out as a new file
write.table(MyData[1,], file = "../results/MyData.csv", append=TRUE) #Append to it
write.csv(MyData, "../results/MyData.csv", row.name=TRUE) # write row names
write.table(MyData, "../results/MyData.csv", col.names=FALSE) # ignore column names
source("basic_io.R")
q()
source("control_flow.R")
z <- runif(1) ## Generate a uniformly distributed random number
if (z <= 0.5) {print ("Less than a half")}
if (z <= 0.5) {print ("Less than a half")}
if (z <= 0.5) {print ("Less than a half")}
if (z <= 0.5) {print ("Less than a half")}
z <- runif(1) ## Generate a uniformly distributed random number
if (z <= 0.5) {print ("Less than a half")}
z <- runif(1) ## Generate a uniformly distributed random number
if (z <= 0.5) {print ("Less than a half")}
for (i in 1:10) {
    j <- i * i
    print(paste(i, " squared is", j ))
}
z <- runif(1) ## Generate a uniformly distributed random number
if (z <= 0.5) {print ("Less than a half")}
z <- runif(1) ## Generate a uniformly distributed random number
if (z <= 0.5) {print ("Less than a half")}
z <- runif(1) ## Generate a uniformly distributed random number
if (z <= 0.5) {print ("Less than a half")}
for (i in 1:10) {
    j <- i * i
    print(paste(i, " squared is", j ))
}
for (i in seq(10)) {
    j <- i * i
    print(paste(i, " squared is", j ))
}
for(species in c('Heliodoxa rubinoides', 
                 'Boissonneaua jardini', 
                 'Sula nebouxii')) {
      print(paste('The species is', species))
}
for (i in v1) {
    print(i)
}
v1 <- c("a","bc","def")
for (i in v1) {
    print(i)
}
i <- 0
while (i < 10) {
    i <- i+1
    print(i^2)
}
source("control_flow.R")
source("control_flow.R")
q()
source("break.R")
source("break.R")
q()
source("next.R")
exit
1()
q()
ls(pattern = "MyFun*")
source("boilerplate.R")
ls(pattern = "MyFun*")
source("boilerplate.R")
ls(pattern = "MyFun*")
ls(pattern = "my*")
class(my_function)
is.even <- function(n=2){
if (n%%2 == 0) {
return(paste(n, "is even!"))
} else {
return(paste(n, "is odd!"))
)
}
q()
source("TreeHeight.R")
TreeHeight(3213,2312)
TreeHeight(180,2312)
TreeHeight(1,2312)
TreeHeight(2,2312)
a <- 1.0
class(a)
q()
source("sample.R")
set.seed(12345)
popn <- rnorm(10000) # Generate the population
hist(popn)
source("sample.R")
source("sample.R")
source("sample.R")
x <- 1:20
x
y <- factor(rep(letters[1:5], each = 4)) 
y
tapply(x, y, sum)
attach(iris)
iris
by(iris[,1,2], iris$Species, colMeans)
by(iris[,1,2], iris$Species, colMeans)
by(iris[,1:2], iris$Species, colMeans)
replicate(10, runif(5))
q()
source("browse.R")
n
n
n
n
n
n
n
c
c
c
c
c
q
Q
source("browse.R")
ls()
Q
buggy_function <- function(n) {
result <- n + unknown_variable
return(result)
}
debug(buggy_function)
buggy_function(10)
buggy_function(10)
n
n
Q
doit <- function(x) {
temp_x <- sample(x, replace = TRUE)
if(length(unique(temp_x) > 30) {
doit <- function(x) {
temp_x <- sample(x, replace = TRUE)
if(length(unique(temp_x)) > 30) {
print(paste("Mean of this sample was:", as.character(mean(temp_x))))
}
else {
stop("Couldn't calulate mean: too few unique values!")
}
}
set.ssed(1345)
set.seed(1345)
popn <- rnorm(50)
hist(popn)
lapply(1:15, function(i) doit(popn))
result <- lapply(1:15, function(i) try(doit(popn), FALSE))
result
result <- vector("list", 15)
for(i in 1:15) {
result[[i]] <- try(doit(popn), FALSE)
}
q()
install.packages(c("tidyverse"))
q()
